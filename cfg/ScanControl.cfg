#!/usr/bin/env python
PACKAGE = "microepsilon_scancontrol"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("auto_shutter",   bool_t,     0, "Adjust shutter time automatically",  True)
gen.add("shutter_time",   double_t,   0, "Shutter time",  0.5, 0.01, 40.0)
gen.add("frequency",      double_t,   0, "Frequency",  50.0, 25, 4000.0)
gen.add("field_left",     double_t,   0, "Cut-off left in %",  0.0, 0.0, 1.0)
gen.add("field_right",    double_t,   0, "Cut-off right in %",  0.0, 0.0, 1.0)
gen.add("field_far",      double_t,   0, "Cut-off far in %",  0.0, 0.0, 1.0)
gen.add("field_near",     double_t,   0, "Cut-off near in %",  0.0, 0.0, 1.0)
gen.add("dense",          bool_t,     0, "Dense point cloud without NaN values",  False)
gen.add("frame",          str_t,      0, "Frame of point cloud")

laser_enum = gen.enum([gen.const("Off",         int_t, 0, "Laser Off"),
                       gen.const("Reduced",     int_t, 1, "Laser reduced power"),
                       gen.const("Standard",    int_t, 2, "Laser standard power")],
                     "An enum to set laser power")

gen.add("laser_power",      int_t,     0, "Set laser power", 2, 0, 2, edit_method=laser_enum)
gen.add("laser_pulse",      bool_t,    0, "Toggle Laser pulse mode",  False)
gen.add("lag_compensation", double_t,  0, "Delay substracted from timestamp in ms", 0.0, -100.0, 100.0)

reflection_enum = gen.enum([gen.const("All",           int_t, 0, "All reflections"),
                            gen.const("First",         int_t, 1, "First reflection"),
                            gen.const("Last",          int_t, 2, "Last reflection"),
                            gen.const("Largest_Area",  int_t, 3, "Largest Area reflection"),
                            gen.const("Max_Intensity", int_t, 4, "Max Intensity reflection"),
                            gen.const("Single",        int_t, 5, "Only single reflection")],
                            "An enum to choose which reflection to process")

gen.add("reflection",        int_t,     0, "Choose Reflection", 1, 0, 5, edit_method=reflection_enum)
gen.add("flip_x",            bool_t,    0, "Flip X values",  False)
gen.add("flip_z",            bool_t,    0, "Flip Z values",  False)
gen.add("late_auto_shutter", bool_t,    0, "Calculate auto shutter after all post-processing", False)

autoshutter_enum = gen.enum([gen.const("Center",        int_t, 0, "Align shutter at center"),
                             gen.const("End",           int_t, 1, "Align shutter at beginning"),
                             gen.const("Beginning",     int_t, 2, "Align shutter at end"),
                             gen.const("Unaligned",     int_t, 3, "Dont align shutter")],
                             "An enum to choose how to align the auto shutter")

gen.add("shutter_alignment",  int_t,     0, "Shutter Alignment", 1, 0, 3, edit_method=autoshutter_enum)                             
gen.add("shutter_algorithm",  bool_t,    0, "Use advanced auto shutter algorithm",  True)

gen.add("peak_width_min",     int_t,     0, "Set Peak filter width minimum", 2, 0, 1023)
gen.add("peak_width_max",     int_t,     0, "Set Peak filter width maximum", 1023, 0, 1023)
gen.add("peak_intensity_min", int_t,     0, "Set Peak filter intensity minimum", 0, 0, 1023)
gen.add("peak_intensity_max", int_t,     0, "Set Peak filter intensity maximum", 1023, 0, 1023)

gen.add("threshold",          int_t,     0, "Set Threshold", 128, 0, 1023)
gen.add("dynamic_threshold",  bool_t,    0, "Use dynamic threshold",  False)
gen.add("video_filter",       bool_t,    0, "Use video filter",  True)
gen.add("ambient_suppresion", bool_t,    0, "Use ambient light suppresion",  True)

average_enum =     gen.enum([gen.const("disable",           int_t, 0, "Dont filter"),
                             gen.const("3",             int_t, 1, "Use 3 points"),
                             gen.const("5",             int_t, 2, "Use 5 points"),
                             gen.const("7",             int_t, 3, "Use 7 points")],
                             "An enum to choose filter size for average and median filter") 

gen.add("average_filter",     int_t,     0, "Average Filter", 0, 0, 3, edit_method=average_enum)
gen.add("median_filter",      int_t,     0, "Median Filter",  0, 0, 3, edit_method=average_enum)  

resample_enum =    gen.enum([gen.const("off",           int_t, 0, "Dont resample"),
                             gen.const("tiny",          int_t, 1, "tiny"),
                             gen.const("very_small",    int_t, 2, "very_small"),
                             gen.const("small",         int_t, 3, "small"),
                             gen.const("medium",        int_t, 4, "medium"),
                             gen.const("large",         int_t, 5, "large"),
                             gen.const("very_large",    int_t, 6, "very large"),
                             gen.const("huge",          int_t, 7, "huge")],
                             "An enum to choose resmple field") 

gen.add("resample",           int_t,     0, "Resample",  0, 0, 73, edit_method=resample_enum)   
gen.add("resample_all",       bool_t,    0, "Resample all data",  True)
gen.add("interpolate",        bool_t,    0, "Interpolate missing points during resample",  True)


gen.add("container_size",     int_t,     1, "Number of Profiles per container", 10, 1, 1000)

exit(gen.generate(PACKAGE, "microepsilon_scancontrol", "ScanControl"))